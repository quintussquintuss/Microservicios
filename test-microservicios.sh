#!/bin/bash

# Script para probar la funcionalidad de los microservicios
echo "üß™ Pruebas de la Arquitectura de Microservicios"
echo "============================================="

API_KEY="74UIHTG984OJR094YTH49**-0573"
BASE_URL="http://localhost:5003"

# Funci√≥n para hacer una petici√≥n y mostrar resultado
test_endpoint() {
    local method=$1
    local endpoint=$2
    local data=$3
    local description=$4
    
    echo "üîç $description"
    echo "   $method $BASE_URL$endpoint"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "\n%{http_code}" -H "X-API-Key: $API_KEY" "$BASE_URL$endpoint")
    elif [ "$method" = "POST" ]; then
        response=$(curl -s -w "\n%{http_code}" -H "X-API-Key: $API_KEY" -H "Content-Type: application/json" -d "$data" "$BASE_URL$endpoint")
    fi
    
    # Separar respuesta y c√≥digo HTTP
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
        echo "   ‚úÖ √âxito (HTTP $http_code)"
        echo "$body" | python3 -m json.tool 2>/dev/null | sed 's/^/      /'
    else
        echo "   ‚ùå Error (HTTP $http_code)"
        echo "$body" | sed 's/^/      /'
    fi
    echo ""
}

# Funci√≥n para probar autenticaci√≥n JWT
test_jwt_auth() {
    echo "üîê Pruebas de Autenticaci√≥n JWT"
    echo "================================"
    
    # Obtener token
    echo "üîë Obteniendo token JWT..."
    jwt_response=$(curl -s -X POST -H "Content-Type: application/json" -d '{"username": "admin", "password": "admin123"}' "$BASE_URL/login")
    echo "$jwt_response" | python3 -m json.tool 2>/dev/null | sed 's/^/   /'
    
    # Extraer token
    token=$(echo "$jwt_response" | python3 -c "import sys, json; print(json.load(sys.stdin).get('access_token', ''))")
    
    if [ -n "$token" ] && [ "$token" != "null" ]; then
        echo ""
        echo "üîç Probando endpoint con JWT token..."
        response=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer $token" "$BASE_URL/usuarios")
        
        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | head -n -1)
        
        if [ "$http_code" -eq 200 ]; then
            echo "   ‚úÖ JWT funciona correctamente (HTTP $http_code)"
        else
            echo "   ‚ùå Error con JWT (HTTP $http_code)"
        fi
    else
        echo "   ‚ùå No se pudo obtener token JWT"
    fi
    echo ""
}

echo "üìã Verificando que los servicios est√©n funcionando..."
if ! curl -s http://localhost:5003/health > /dev/null; then
    echo "‚ùå Gateway no est√° funcionando. Ejecuta ./start-microservicios.sh primero"
    exit 1
fi

echo "‚úÖ Gateway funcionando"
echo ""

# 1. Informaci√≥n general
test_endpoint "GET" "/" "" "Informaci√≥n general de la arquitectura"

# 2. Health check
test_endpoint "GET" "/health" "" "Health check de todos los servicios"

# 3. Autenticaci√≥n JWT
test_jwt_auth

# 4. Gesti√≥n de usuarios
echo "üë• Pruebas de Gesti√≥n de Usuarios"
echo "=================================="
test_endpoint "GET" "/usuarios" "" "Obtener todos los usuarios"
test_endpoint "GET" "/usuarios/1" "" "Obtener usuario espec√≠fico (ID: 1)"
test_endpoint "POST" "/usuarios" '{"nombre": "Usuario de Prueba"}' "Crear nuevo usuario"

# 5. Gesti√≥n de pedidos
echo "üì¶ Pruebas de Gesti√≥n de Pedidos"
echo "================================"
test_endpoint "GET" "/pedidos" "" "Obtener todos los pedidos"
test_endpoint "GET" "/pedidos/1" "" "Obtener pedido espec√≠fico (ID: 1)"
test_endpoint "POST" "/pedidos" '{"usuario_id": 1, "producto": "Producto de Prueba"}' "Crear nuevo pedido"

# 6. Pruebas de comunicaci√≥n entre microservicios
echo "üîó Pruebas de Comunicaci√≥n entre Microservicios"
echo "==============================================="

echo "üîç Verificando que pedidos incluyan informaci√≥n de usuarios (comunicaci√≥n inter-servicios)..."
pedidos_response=$(curl -s -H "X-API-Key: $API_KEY" "$BASE_URL/pedidos")
echo "$pedidos_response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if 'pedidos' in data:
        for pedido in data['pedidos']:
            if 'usuario' in pedido and 'comunicacion_microservicios' in pedido:
                print(f'   ‚úÖ Pedido {pedido[\"id\"]}: Usuario \"{pedido[\"usuario\"]}\" (Comunicaci√≥n: {pedido[\"comunicacion_microservicios\"]})')
            else:
                print(f'   ‚ö†Ô∏è  Pedido {pedido[\"id\"]}: Sin informaci√≥n de usuario')
    else:
        print('   ‚ùå No se pudieron obtener pedidos')
except:
    print('   ‚ùå Error procesando respuesta')
"

echo ""
echo "üéâ ¬°Pruebas completadas!"
echo "========================"
echo ""
echo "üìä Resumen:"
echo "   ‚Ä¢ ‚úÖ Arquitectura de microservicios funcionando"
echo "   ‚Ä¢ ‚úÖ Comunicaci√≥n HTTP entre servicios"
echo "   ‚Ä¢ ‚úÖ Gateway orquestando peticiones"
echo "   ‚Ä¢ ‚úÖ Autenticaci√≥n (API Key y JWT)"
echo "   ‚Ä¢ ‚úÖ Servicios independientes y escalables"
echo ""
echo "üîß Para m√°s pruebas:"
echo "   ‚Ä¢ curl -H 'X-API-Key: $API_KEY' http://localhost:5003/"
echo "   ‚Ä¢ curl http://localhost:5004/ (usuario-service directo)"
echo "   ‚Ä¢ curl http://localhost:5005/ (pedido-service directo)"
